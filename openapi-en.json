{"openapi": "3.0.0", "servers": [{"url": "https://open.canada.ca/data/api", "description": "Production Portal [PUBLIC]"}, {"url": "https://registry.open.canada.ca/api", "description": "Production Registry [RESTRICTED ACCESS]"}, {"url": "https://staging.open.canada.ca/data/api", "description": "Staging Portal [RESTRICTED ACCESS]"}, {"url": "https://registry-staging.open.canada.ca/api", "description": "Staging Registry [RESTRICTED ACCESS]"}, {"url": "https://test.open.canada.ca/data/api", "description": "Test Portal [RESTRICTED ACCESS]"}, {"url": "https://registry-test.open.canada.ca/api", "description": "Test Registry [RESTRICTED ACCESS]"}], "info": {"title": "Open Government CKAN API", "description": "This API provides live access to the CKAN portion of the Open Government Portal and Registry systems.\n\n- Portal: https://open.canada.ca\n  - our public data portal\n  - includes data federated from provinces and municipalities\n  - read-only API calls can be made without an API key\n  - authorization required only for publishing federated data\n\n- Registry: https://registry.open.canada.ca\n  - accessible within the Government of Canada (GoC) network\n  - for collecting and publishing data from GoC departments\n  - new datasets must be manually reviewed and approved by the Open Government team\n  - publishes approved datasets to the Production Portal automatically\n  - user account or API key required for all operations\n\nOur Staging sites are for sharing upcoming features and testing integration, and Test sites\nare for features in development.\n", "termsOfService": "https://open.canada.ca/en/open-government-licence-canada", "contact": {"name": "TBS Open Government", "url": "https://open.canada.ca/", "email": "open-ouvert@tbs-sct.gc.ca"}, "license": {"name": "Open Government License - Canada", "url": "https://open.canada.ca/en/open-government-licence-canada"}, "version": "0.1"}, "tags": [{"name": "action", "description": "### CKAN's Action API is a powerful, RPC-style API that exposes all of CKAN's core features\n\nAll endpoints support POST requests with an `application/json` or a\n  `multipart/form-data` body.\n- Use an `application/json` POST request when nested json parameters\n  are required\n- Use a `multipart/form-data` POST request when file uploads are required\n\nRead-only endpoints (`*_show`, `*_list`, `*_search` etc.)\naccept GET requests with query parameters.\n\nResponses are returned in a JSON envelope on success:\n```json\n{\n  \"help\": \"url to complete endpoint help\",\n  \"success\": true,\n  \"result\": {...}\n}\n```\nor on errors:\n```json\n{\n  \"help\": \"url to complete endpoint help\",\n  \"success\": false,\n  \"error\": {\n    \"__type\": \"error type\",\n    \"message\": \"error message\",\n    \"field-with-error\": [\"first-error\", \"second-error\"],\n    ...\n  }\n}\n```\n", "externalDocs": {"description": "Full docs", "url": "https://docs.ckan.org/en/2.8/api/"}}], "security": [{}, {"internal_api_key": []}], "paths": {"/action/status_show": {"get": {"summary": "Get the CKAN version and a list of installed extensions", "description": "Use this API to check that you can reach the server and to check its capabilities.", "tags": ["action"], "responses": {"200": {"description": "Returns the CKAN version and a list of installed extensions"}}}}, "/action/package_list": {"get": {"summary": "Get a list of all package ids (datasets)", "description": "Note: our site uses the same value for the \"name\" and \"id\" fields of datasets\n", "tags": ["action"], "responses": {"200": {"description": "Returns a list of package ids"}}}}, "/action/package_search": {"get": {"summary": "Find packages (datasets) matching query terms", "description": "Searches for packages (datasets) matching the specified query terms", "parameters": [{"name": "q", "in": "query", "description": "A solr query string that will be used to filter and score results\n", "schema": {"type": "string"}, "examples": {"All data": {"value": ""}, "Analytics": {"value": "analytics"}, "Mammals": {"value": "mammal population"}}}, {"name": "fq", "in": "query", "description": "A solr filter query that will facet results by removing non-matching items.\nThe available parameters may be discovered by interacting with the\nfacets on https://open.canada.ca/data/dataset and observing the\nquery parameters generated.\n", "schema": {"type": "string"}, "examples": {"No filter": {"value": ""}, "Published by the federal Treasury Board Secretariat": {"value": "organization:tbs-sct"}, "Published by municipalities": {"value": "jurisdiction:municipal"}, "Transport data": {"value": "subject:transport"}, "Federal Open Maps data from Environment Canada": {"value": "collection:fgp organization:ec"}}}, {"name": "sort", "in": "query", "description": "Sort order for the search results, defaults to `score desc, metadata_modified desc`\nmeaning sort by query score order, and with no query sort by most recently modified\n", "schema": {"type": "string"}}, {"name": "rows", "in": "query", "description": "Maximum rows to return, clamped to 1000", "schema": {"type": "integer", "default": 20}}, {"name": "start", "in": "query", "description": "The offset from the beginning of results (0) for pagination", "schema": {"type": "integer"}}, {"name": "include_private", "in": "query", "description": "Must be set to `true` to retrieve results on the Registry,\nno effect on the Portal\n", "schema": {"type": "boolean"}}], "responses": {"200": {"description": "List of packages (datasets) including all metadata available."}}, "tags": ["action"]}, "post": {"summary": "Find packages (datasets) matching query terms", "description": "Searches for packages (datasets) matching the specified query terms", "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "object", "properties": {"q": {"type": "string", "description": "A solr query string that will be used to filter and score results\n"}, "fq": {"type": "string", "description": "A solr filter query that will facet results by removing non-matching items.\nThe available parameters may be discovered by interacting with the\nfacets on https://open.canada.ca/data/dataset and observing the\nquery parameters generated.\n"}, "sort": {"type": "string", "description": "Sort order for the search results, defaults to `score desc, metadata_modified desc`\nmeaning sort by query score order, and with no query sort by most recently modified\n"}, "rows": {"type": "integer", "description": "Maximum rows to return, clamped to 1000"}, "start": {"type": "integer", "description": "The offset from the beginning of results (0) for pagination"}, "include_private": {"type": "boolean", "description": "Must be set to `true` to retrieve results on the Registry,\nno effect on the Portal\n"}}}, "examples": {"10 most recently modified datasets": {"value": {"rows": 10}}, "3 datasets that best match \"water use\"": {"value": {"q": "water use", "rows": 3}}, "Datasets number 101-120 by last modified date": {"value": {"sort": "metadata_modified desc", "start": 100, "rows": 20}}}}}}, "tags": ["action"], "responses": {"200": {"description": "List of packages (datasets) including all metadata available."}}}}, "/action/package_show": {"get": {"summary": "Get metadata about one specific package (dataset)", "description": "Returns metadata about the package (dataset) corresponding to its UUID. Refer to the [open data schema (type=dataset)](https://open.canada.ca/data/api/action/scheming_dataset_schema_show?type=dataset) or the [open information schema (type=info)](https://open.canada.ca/data/api/action/scheming_dataset_schema_show?type=info) for information about the metadata fields returned.", "parameters": [{"name": "id", "in": "query", "description": "The package UUID", "schema": {"type": "string", "format": "uuid", "default": "2916fad5-ebcc-4c86-b0f3-4f619b29f412"}}], "tags": ["action"], "responses": {"200": {"description": "A package metadata object", "content": {"application/json": {"schema": {"$ref": "schemas/dataset-en.json"}}}}}}}, "/action/package_activity_list": {"get": {"summary": "Get the activity stream of a package (dataset)", "description": "Returns a package's activity stream, newest activities first", "parameters": [{"name": "id", "in": "query", "description": "The package UUID", "schema": {"type": "string", "default": "2916fad5-ebcc-4c86-b0f3-4f619b29f412"}}, {"name": "offset", "in": "query", "description": "The offset of the first activity to return, used for pagination", "schema": {"type": "integer", "default": 0}}, {"name": "limit", "in": "query", "description": "The maximum number of activities to return", "schema": {"type": "integer", "default": 31}}], "tags": ["action"], "responses": {"200": {"description": "List of activities"}}}}, "/action/organization_activity_list": {"get": {"summary": "Get the activity stream of an organization", "description": "Return an organization's activity stream, newest activites first", "parameters": [{"name": "id", "in": "query", "description": "The id or name (short form) of the organization", "schema": {"type": "string", "default": "ec"}}, {"name": "offset", "in": "query", "description": "The offset of the first activity to return, used for pagination", "schema": {"type": "integer", "default": 0}}, {"name": "limit", "in": "query", "description": "The maximum number of activities to return", "schema": {"type": "integer", "default": 31}}], "tags": ["action"], "responses": {"200": {"description": "List of an organization's activities"}}}}, "/action/organization_list_for_user": {"get": {"summary": "Get organizations that a user has a given permission for", "description": "Return the organizations that the user has a given permission for", "parameters": [{"name": "id", "in": "query", "description": "The name or id of the user, defaults to the user making the request", "schema": {"type": "string"}}, {"name": "permission", "in": "query", "description": "The permission the user has against the returned organization", "schema": {"type": "string", "default": "manage_group"}, "examples": {"Admin": {"value": "admin"}, "Editor": {"value": "manage_group"}, "Member": {"value": "read"}}}], "tags": ["action"], "responses": {"200": {"description": "List of organizations for given permission"}}}}, "/action/organization_show": {"get": {"summary": "Get details of a specific organization", "description": "Return the details of an organization", "parameters": [{"name": "id", "in": "query", "description": "The id or name (short form) of the organization", "schema": {"type": "string", "default": "tbs-sct"}}], "tags": ["action"], "responses": {"200": {"description": "List organization details"}}}}, "/action/organization_list": {"get": {"summary": "Get names of all organizations", "description": "Returns the names (short forms) of all indexed organizations", "parameters": [], "tags": ["action"], "responses": {"200": {"description": "List of organizations"}}}}, "/action/resource_search": {"get": {"summary": "Find resources", "description": "Search resources based on their field values. Note that [package_search](#/action/get_action_package_search) has better performance and more search functionality than this endpoint.", "parameters": [{"name": "query", "in": "query", "description": "The search criteria string or list of strings of the form ``{field}:{term1}``", "schema": {"type": "string", "default": "format:csv"}}, {"name": "order_by", "in": "query", "description": "A field on the resource model that orders the results", "schema": {"type": "string"}}, {"name": "offset", "in": "query", "description": "Apply an offset to the query", "schema": {"type": "integer", "default": 0}}, {"name": "limit", "in": "query", "description": "Apply a limit to the query", "schema": {"type": "integer", "default": 0}}], "tags": ["action"], "responses": {"200": {"description": "List of resources"}}}}, "/action/resource_show": {"get": {"summary": "Get metadata for a specific resource", "description": "Returns the metadata of a resource. Refer to the [resource_fields value in the dataset schema](https://open.canada.ca/data/api/action/scheming_dataset_schema_show?type=dataset) for information about the metadata fields.", "parameters": [{"name": "id", "in": "query", "description": "The id of the resource", "schema": {"type": "string", "default": "e6c8bb1d-3726-418b-9b7e-1d97a9bbb817"}}, {"name": "include_tracking", "in": "query", "description": "Return tracking (usage) information", "schema": {"type": "boolean", "default": false}}], "tags": ["action"], "responses": {"200": {"description": "Return metadata of a resource", "content": {"application/json": {"schema": {"$ref": "schemas/dataset-en.json#/properties/resources/items"}}}}}}}, "/action/datastore_search": {"get": {"summary": "Search a datastore resource", "description": "The datastore_search action allows you to search data in a resource.\n\nWell-formatted CSV files that are uploaded (not linked) are automatically\nloaded into the datastore.\n", "parameters": [{"name": "resource_id", "in": "query", "description": "id or alias of the resource to be searched against", "schema": {"type": "string"}}, {"name": "filters", "in": "query", "description": "matching conditions to select", "schema": {"type": "object"}, "examples": {"Filter on two columns": {"value": {"key1": "a", "key2": "b"}}}}, {"name": "q", "in": "query", "description": "full text query searching across all columns in each row", "schema": {"type": "string"}}, {"name": "distinct", "in": "query", "description": "return only distinct rows", "schema": {"type": "boolean", "default": false}}, {"name": "plain", "in": "query", "description": "treat as plain text query", "schema": {"type": "boolean", "default": true}}, {"name": "language", "in": "query", "description": "language of the full text query", "schema": {"type": "string", "default": "english"}}, {"name": "limit", "in": "query", "description": "maximum number of rows to return", "schema": {"type": "integer", "default": 100}}, {"name": "offset", "in": "query", "description": "offset this number of rows", "schema": {"type": "integer"}}, {"name": "fields", "in": "query", "description": "comma-separated string of column names to return", "schema": {"type": "string"}}, {"name": "sort", "in": "query", "description": "comma-separated string of column names with sort order", "schema": {"type": "string"}}, {"name": "include_total", "in": "query", "description": "calculate and return the total number of matching rows, set to false for improved performance", "schema": {"type": "boolean", "default": true}}, {"name": "records_format", "in": "query", "description": "the format for the records return value, set to `csv` or `tsv` for improved performance", "schema": {"type": "string", "default": "objects"}}], "responses": {"200": {"description": "List of packages (datasets) including all metadata available."}}, "tags": ["action"]}, "post": {"summary": "Search a datastore resource", "description": "The datastore_search action allows you to search data in a resource.\n\nWell-formatted CSV files that are uploaded (not linked) are automatically\nloaded into the datastore.\n", "requestBody": {"required": true, "content": {"application/json": {"schema": {"type": "object", "properties": {"resource_id": {"type": "string", "format": "uuid", "description": "id or alias of the resource to be searched against"}, "filters": {"type": "object", "description": "matching conditions to select"}, "q": {"oneOf": [{"type": "string", "description": "full text query searching across all columns in each row"}, {"type": "object", "description": "fill text search on each field given"}]}, "distinct": {"type": "boolean", "description": "return only distinct rows"}, "plain": {"type": "boolean", "description": "treat as plain text query"}, "language": {"type": "string", "description": "language of the full text query"}, "limit": {"type": "integer", "description": "maximum number of rows to return"}, "offset": {"type": "integer", "description": "offset this number of rows"}, "fields": {"oneOf": [{"type": "string", "description": "comma-separated string of column names to return"}, {"type": "array", "description": "list of column names to return"}]}, "sort": {"type": "string", "description": "comma-separated string of column names with sort order", "example": {"Two-column sort": {"value": "key1, key2 desc"}}}, "include_total": {"type": "boolean", "description": "calculate and return the total number of matching rows, set to false for improved performance"}, "records_format": {"type": "string", "description": "the format for the records return value, set to `csv` or `tsv` for improved performance", "enum": ["objects", "lists", "csv", "tsv"]}}}}}}, "tags": ["action"], "responses": {"200": {"description": "List of packages (datasets) including all metadata available."}}}}, "/action/scheming_dataset_schema_show": {"get": {"summary": "Return the schema for a dataset type", "description": "Dataset metadata schemas are defined in the [ckanext-scheming](https://github.com/ckan/ckanext-scheming)\nformat.\n", "parameters": [{"name": "type", "in": "query", "description": "The dataset type", "schema": {"type": "string", "default": "dataset", "enum": ["dataset", "info"]}}], "tags": ["action"], "responses": {"200": {"description": "Returns metadata schema"}}}}, "/action/package_create": {"post": {"summary": "Create a new dataset (package)", "description": "The exact fields available will depend on the `type` parameter.\n\nRefer to the [open data schema (type=dataset)](https://open.canada.ca/data/api/action/scheming_dataset_schema_show?type=dataset)\nor the [open information schema (type=info)](https://open.canada.ca/data/api/action/scheming_dataset_schema_show?type=info)\nfor information about all the metadata fields available.\n", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "schemas/dataset-en.json"}}}}, "tags": ["action"], "responses": {"200": {"description": "a copy of the dataset metadata created"}}}}, "/action/package_update": {"post": {"summary": "Update an existing dataset (package)", "description": "The exact fields available will depend on the `type` parameter.\n\nRefer to the [open data schema (type=dataset)](https://open.canada.ca/data/api/action/scheming_dataset_schema_show?type=dataset)\nor the [open information schema (type=info)](https://open.canada.ca/data/api/action/scheming_dataset_schema_show?type=info)\nfor information about all the metadata fields available.\n", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "schemas/dataset-en.json"}}}}, "tags": ["action"], "responses": {"200": {"description": "a copy of the dataset metadata updated"}}}}, "/action/package_patch": {"post": {"summary": "Update only specific fields of an existing dataset (package)", "description": "Any fields not passed will retain their original values.\n\nThe exact fields available will depend on the `type` parameter.\n\nRefer to the [open data schema (type=dataset)](https://open.canada.ca/data/api/action/scheming_dataset_schema_show?type=dataset)\nor the [open information schema (type=info)](https://open.canada.ca/data/api/action/scheming_dataset_schema_show?type=info)\nfor information about all the metadata fields available.\n", "requestBody": {"required": true, "content": {"application/json": {"schema": {"$ref": "schemas/dataset-en.json"}}}}, "tags": ["action"], "responses": {"200": {"description": "a copy of the dataset metadata updated"}}}}, "/action/package_delete": {"post": {"summary": "Delete a dataset (package)", "description": "Remove a dataset and all its resources including uploaded files (where applicable).\n", "requestBody": {"content": {"application/json": {"schema": {"type": "object", "properties": {"id": {"type": "string", "format": "uuid", "description": "The id of the dataset"}}}}}}, "tags": ["action"], "responses": {"200": {"description": "null"}}}}, "/action/resource_create": {"post": {"summary": "Create a new resource", "description": "Add a resource to a dataset (package). POST using `multipart/form-data` to upload a file.\n", "requestBody": {"content": {"application/json": {"schema": {"$ref": "schemas/dataset-en.json#/properties/resources/items"}}, "multipart/form-data": {"schema": {"$ref": "schemas/resource-multipart-en.json"}}}}, "tags": ["action"], "responses": {"200": {"description": "a copy of the resource metadata created"}}}}, "/action/resource_update": {"post": {"summary": "Update an existing resource", "description": "POST using `multipart/form-data` to upload a file.\n", "requestBody": {"content": {"application/json": {"schema": {"$ref": "schemas/dataset-en.json#/properties/resources/items"}}, "multipart/form-data": {"schema": {"$ref": "schemas/resource-multipart-en.json"}}}}, "tags": ["action"], "responses": {"200": {"description": "a copy of the resource metadata updated"}}}}, "/action/resource_patch": {"post": {"summary": "Update only specific fields of an existing resource", "description": "Any fields not passed will retain their original values.\n\nPOST using `multipart/form-data` to upload a file.\n", "requestBody": {"content": {"application/json": {"schema": {"$ref": "schemas/dataset-en.json#/properties/resources/items"}}, "multipart/form-data": {"schema": {"$ref": "schemas/resource-multipart-en.json"}}}}, "tags": ["action"], "responses": {"200": {"description": "a copy of the resource metadata updated"}}}}, "/action/resource_delete": {"post": {"summary": "Delete a resource", "description": "Remove a resource from a dataset (package) and its uploaded file (where applicable).\n", "requestBody": {"content": {"application/json": {"schema": {"type": "object", "properties": {"id": {"type": "string", "format": "uuid", "description": "The id of the resource"}}}}}}, "tags": ["action"], "responses": {"200": {"description": "null"}}}}}, "components": {"schemas": {}, "securitySchemes": {"internal_api_key": {"type": "apiKey", "in": "header", "name": "Authorization"}}}}